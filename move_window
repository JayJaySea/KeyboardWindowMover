#!/usr/bin/python3

import sys
import os
import time
from pynput import keyboard
#from tendo import singleton
import math

#me = singleton.SingleInstance()

N = 400
sx = 0
sy = 0

vx = 0
vy = 0
vmax = 10

dix = 0
diy = 0

acc = 200

ctrl = False
alt = False
dt = 0


def on_press(key):
    global dix
    global diy
    try:
        if key.char == 'l':
            dix = 1

        elif key.char== 'h':
            dix = -1

        elif key.char == 'j':
            diy = 1

        elif key.char == 'k':
            diy = -1

    except AttributeError:
        pass

def on_release(key):
    global ctrl
    global alt
    global dix
    global diy
    try:
        if key == keyboard.Key.ctrl_l:
            ctrl = True
        if key == keyboard.Key.alt_l:
            alt = True
        if ctrl and alt:
            return False

        if key.char == 'h' and dix != 1:
            dix = 0
        if key.char == 'l' and dix != -1:
            dix = 0
        if key.char == 'j' and diy != -1:
            diy = 0
        if key.char == 'k' and diy != 1:
            diy = 0

    except AttributeError:
        pass

listener = keyboard.Listener(
    on_press=on_press,
    on_release=on_release)

listener.start()


def update():
    global dix
    global diy
    updateDistance()
    updateVelocity()

    #psx = format(sx, 'f')
    #psy = format(sy, 'f')

    psx = str(int(sx))
    psy = str(int(sy))

    os.system("xdotool getactivewindow windowmove --relative -- " + psx  + " " + psy)


def updateDistance():
    global sx
    global sy

    if (dix != -1):
        sx = math.ceil(dt*vx*N + acc*pow(dt, 2)*0.5*dix*N)
    elif (dix != 1):
        sx = math.floor(dt*vx*N + acc*pow(dt, 2)*0.5*dix*N)

    if (diy != -1):
        sy = math.ceil(dt*vy*N + acc*pow(dt, 2)*0.5*diy*N)
    elif (diy != 1):
        sy = math.floor(dt*vy*N + acc*pow(dt, 2)*0.5*diy*N)


def updateVelocity():
    #(sign(dix) == sign(vx)):
    if dix != 0 or diy != 0:
        accelerate()
    if dix == 0 or diy == 0:
        decelerate()

    limitVelocity()


def accelerate():
    global vx
    global vy

    vx += acc*dt*dix
    vy += acc*dt*diy


def decelerate():
    global vx
    global vy

    if abs(vx) <= 0.2:
        vx = 0

    if abs(vy) <= 0.2:
        vy = 0

    if vx != 0:
        vx *= 0.6 + 0.4*abs(dix)
    if vy != 0:
        vy *= 0.6 + 0.4*abs(diy)


def limitVelocity():
    global vx
    global vy
    vw = math.sqrt(pow(vx, 2) + pow(vy, 2))

    if (vw >= vmax):
        vx = (vx/vw) * vmax
        vy = (vy/vw) * vmax


while listener.is_alive():
    begin = time.time()

    if dt >= 0.006:
        update()
        dt = 0

    dt += time.time() - begin

